"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const code_gen_1 = require("@volar/code-gen");
const source_map_1 = require("@volar/source-map");
function default_1() {
    return {
        compileFileToVue(fileName, content) {
            if (fileName.endsWith('.md')) {
                content = content
                    // code block
                    .replace(/```[\s\S]*?```/g, match => '```' + ' '.repeat(match.length - 6) + '```')
                    // inline code block
                    .replace(/`[\s\S]*?`/g, match => `\`${' '.repeat(match.length - 2)}\``)
                    // # \<script setup>
                    .replace(/\\\<[\s\S]*?\>\n?/g, match => ' '.repeat(match.length));
                const sfcBlockReg = /\<(script|style)[\s\S]*?\>([\s\S]*?)\<\/\1\>/g;
                const codeGen = new code_gen_1.CodeGen();
                for (const match of content.matchAll(sfcBlockReg)) {
                    if (match.index !== undefined) {
                        const matchText = match[0];
                        codeGen.addCode2(matchText, match.index, undefined);
                        codeGen.addText('\n\n');
                        content = content.substring(0, match.index) + ' '.repeat(matchText.length) + content.substring(match.index + matchText.length);
                    }
                }
                content = content
                    // angle bracket: <http://foo.com>
                    .replace(/\<\S*\:\S*\>/g, match => ' '.repeat(match.length))
                    // [foo](http://foo.com)
                    .replace(/\[[\s\S]*?\]\([\s\S]*?\)/g, match => ' '.repeat(match.length));
                codeGen.addText('<template>\n');
                codeGen.addCode(content, {
                    start: 0,
                    end: content.length,
                }, source_map_1.Mode.Offset, undefined);
                codeGen.addText('\n</template>');
                return {
                    vue: codeGen.getText(),
                    mappings: codeGen.getMappings().map(mapping => ({
                        fileOffset: mapping.sourceRange.start,
                        vueOffset: mapping.mappedRange.start,
                        length: mapping.mappedRange.end - mapping.mappedRange.start,
                    })),
                };
            }
            ;
        }
    };
}
exports.default = default_1;
//# sourceMappingURL=file-md.js.map
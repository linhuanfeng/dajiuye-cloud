import type * as ts from 'typescript/lib/tsserverlibrary';
import { LanguageServiceHost } from './types';
import { EmbeddedFile, VueLanguagePlugin } from './sourceFile';
export declare type LanguageServiceContext = ReturnType<typeof createLanguageServiceContext>;
export declare function createLanguageServiceContext(ts: typeof import('typescript/lib/tsserverlibrary'), host: LanguageServiceHost, extraPlugins?: VueLanguagePlugin[], exts?: string[]): {
    typescriptLanguageServiceHost: ts.LanguageServiceHost;
    typescriptLanguageService: ts.LanguageService;
    readonly sourceFiles: {
        get: (fileName: string) => import("./sourceFile").SourceFile;
        delete: (fileName: string) => boolean;
        has: (fileName: string) => boolean;
        set: (fileName: string, vueFile: import("./sourceFile").SourceFile) => import("./sourceFile").SourceFile;
        getFileNames: () => string[];
        getDirs: () => string[];
        getAll: () => import("./sourceFile").SourceFile[];
        getTeleport: (fileName: string) => import(".").Teleport | undefined;
        getAllEmbeddeds: () => Generator<{
            vueFile: import("./sourceFile").SourceFile;
            embedded: import("./sourceFile").Embedded;
        }, void, unknown>;
        fromEmbeddedLocation: (fileName: string, start: number, end?: number | undefined, filter?: ((data: import("@volar/vue-code-gen").EmbeddedFileMappingData) => boolean) | undefined, sourceMapFilter?: ((sourceMap: import(".").EmbeddedFileSourceMap) => boolean) | undefined) => Generator<{
            fileName: string;
            range: {
                start: number;
                end: number;
            };
            mapped: {
                vueFile: import("./sourceFile").SourceFile;
                embedded: import("./sourceFile").Embedded;
            };
            data: import("@volar/vue-code-gen").EmbeddedFileMappingData;
        } | {
            fileName: string;
            range: {
                start: number;
                end: number;
            };
            mapped?: undefined;
            data?: undefined;
        }, void, unknown>;
        fromEmbeddedFile: (file: EmbeddedFile) => import("./sourceFile").SourceFile | undefined;
        fromEmbeddedFileName: (fileName: string) => {
            vueFile: import("./sourceFile").SourceFile;
            embedded: import("./sourceFile").Embedded;
        } | undefined;
    };
};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createParsedCommandLine = void 0;
const path = require("path");
function createParsedCommandLine(ts, parseConfigHost, tsConfig, extendsSet = new Set()) {
    var _a;
    const tsConfigPath = ts.sys.resolvePath(tsConfig);
    const config = ts.readJsonConfigFile(tsConfigPath, ts.sys.readFile);
    const content = ts.parseJsonSourceFileConfigFileContent(config, parseConfigHost, path.dirname(tsConfigPath), {}, path.basename(tsConfigPath));
    content.options.outDir = undefined; // TODO: patching ts server broke with outDir + rootDir + composite/incremental
    let baseVueOptions = {};
    const folder = path.dirname(tsConfigPath);
    extendsSet.add(tsConfig);
    if (content.raw.extends) {
        try {
            const extendsPath = require.resolve(content.raw.extends, { paths: [folder] });
            if (!extendsSet.has(extendsPath)) {
                baseVueOptions = createParsedCommandLine(ts, parseConfigHost, extendsPath, extendsSet).vueOptions;
            }
        }
        catch (error) {
            console.error(error);
        }
    }
    return Object.assign(Object.assign({}, content), { vueOptions: Object.assign(Object.assign({}, baseVueOptions), resolveVueCompilerOptions((_a = content.raw.vueCompilerOptions) !== null && _a !== void 0 ? _a : {}, folder)) });
}
exports.createParsedCommandLine = createParsedCommandLine;
function resolveVueCompilerOptions(rawOptions, rootPath) {
    const result = Object.assign({}, rawOptions);
    let templateOptionsPath = rawOptions.experimentalTemplateCompilerOptionsRequirePath;
    if (templateOptionsPath) {
        if (!path.isAbsolute(templateOptionsPath)) {
            templateOptionsPath = require.resolve(templateOptionsPath, { paths: [rootPath] });
        }
        try {
            result.experimentalTemplateCompilerOptions = require(templateOptionsPath).default;
        }
        catch (error) {
            console.warn('Failed to require "experimentalTemplateCompilerOptionsRequirePath":', templateOptionsPath);
            console.error(error);
        }
    }
    return result;
}
//# sourceMappingURL=ts.js.map
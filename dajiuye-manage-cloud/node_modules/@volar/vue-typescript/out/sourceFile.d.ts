import { EmbeddedFileMappingData, TeleportMappingData, TextRange } from '@volar/vue-code-gen';
import { ComputedRef } from '@vue/reactivity';
import { VueCompilerOptions } from './types';
import { EmbeddedFileSourceMap, Teleport } from './utils/sourceMaps';
import type * as _0 from 'typescript/lib/tsserverlibrary';
import { Mapping, SourceMapBase } from '@volar/source-map';
export interface VueLanguagePlugin {
    compileFileToVue?(fileName: string, content: string): {
        vue: string;
        mappings: {
            fileOffset: number;
            vueOffset: number;
            length: number;
        }[];
    } | undefined;
    compileTemplateToHtml?(lang: string, tmplate: string): {
        html: string;
        mapping(htmlRange: {
            start: number;
            end: number;
        }): {
            start: number;
            end: number;
        } | undefined;
    } | undefined;
    getEmbeddedFilesCount?(fileName: string, sfc: Sfc): number;
    getEmbeddedFile?(fileName: string, sfc: Sfc, i: number): EmbeddedFile | undefined;
}
export interface SourceFile extends ReturnType<typeof createSourceFile> {
}
export interface EmbeddedStructure {
    self: Embedded | undefined;
    embeddeds: EmbeddedStructure[];
}
export interface Embedded {
    file: EmbeddedFile;
    sourceMap: EmbeddedFileSourceMap;
    teleport: Teleport | undefined;
}
export interface SfcBlock {
    tag: 'script' | 'scriptSetup' | 'template' | 'style' | 'customBlock';
    start: number;
    end: number;
    startTagEnd: number;
    endTagStart: number;
    lang: string;
    content: string;
}
export interface Sfc {
    template: SfcBlock | null;
    script: (SfcBlock & {
        src: string | undefined;
    }) | null;
    scriptSetup: SfcBlock | null;
    styles: (SfcBlock & {
        module: string | undefined;
        scoped: boolean;
    })[];
    customBlocks: (SfcBlock & {
        type: string;
    })[];
}
export interface EmbeddedFile {
    parentFileName?: string;
    fileName: string;
    content: string;
    isTsHostFile: boolean;
    capabilities: {
        diagnostics: boolean;
        foldingRanges: boolean;
        formatting: boolean;
        documentSymbol: boolean;
        codeActions: boolean;
        inlayHints: boolean;
    };
    mappings: Mapping<EmbeddedFileMappingData>[];
    teleportMappings?: Mapping<TeleportMappingData>[];
}
export declare function createSourceFile(fileName: string, _content: string, compilerOptions: ts.CompilerOptions, vueCompilerOptions: VueCompilerOptions, ts: typeof import('typescript/lib/tsserverlibrary'), extraPlugins?: VueLanguagePlugin[]): {
    fileName: string;
    text: string;
    getCompiledVue: () => SourceMapBase<undefined>;
    getSfcTemplateLanguageCompiled: () => {
        html: string;
        mapping(htmlRange: {
            start: number;
            end: number;
        }): {
            start: number;
            end: number;
        } | undefined;
    } | undefined;
    getSfcVueTemplateCompiled: () => {
        errors: import("@volar/vue-code-gen").CompilerError[];
        warnings: import("@volar/vue-code-gen").CompilerError[];
        ast: import("@volar/vue-code-gen").RootNode | undefined;
    } | undefined;
    getScriptFileName: () => string;
    getDescriptor: () => Sfc;
    getScriptAst: () => _0.SourceFile | undefined;
    getScriptSetupAst: () => _0.SourceFile | undefined;
    getSfcRefSugarRanges: () => {
        refs: {
            flag: TextRange;
            leftBindings: TextRange[];
            rightFn: TextRange;
        }[];
        raws: {
            fullRange: TextRange;
            argsRange: TextRange;
        }[];
    } | undefined;
    getEmbeddeds: () => EmbeddedStructure[];
    getScriptSetupRanges: () => {
        importSectionEndOffset: number;
        notOnTopTypeExports: TextRange[];
        bindings: TextRange[];
        typeBindings: TextRange[];
        withDefaultsArg: TextRange | undefined;
        propsAssignName: string | undefined;
        propsRuntimeArg: TextRange | undefined;
        propsTypeArg: TextRange | undefined;
        emitsAssignName: string | undefined;
        emitsRuntimeArg: TextRange | undefined;
        emitsTypeArg: TextRange | undefined;
        emitsTypeNums: number;
        exposeRuntimeArg: TextRange | undefined;
        exposeTypeArg: TextRange | undefined;
    } | undefined;
    isJsxMissing: () => boolean;
    getAllEmbeddeds: () => Embedded[];
    getTeleports: () => {
        file: EmbeddedFile;
        teleport: Teleport;
    }[];
};
export declare function useStyleCssClasses(sfc: Sfc, condition: (style: Sfc['styles'][number]) => boolean): ComputedRef<{
    style: (typeof sfc.styles)[number];
    index: number;
    classNameRanges: TextRange[];
    classNames: string[];
}[]>;
export declare function useCssVars(sfc: Sfc): ComputedRef<{
    style: (typeof sfc.styles)[number];
    styleIndex: number;
    ranges: TextRange[];
}[]>;
